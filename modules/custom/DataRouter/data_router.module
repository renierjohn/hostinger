<?php

use Drupal\user\Entity\User;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\views\Views;
use Drupal\Core\Site\Settings;
use Symfony\Component\HttpFoundation\RedirectResponse;
use GuzzleHttp\Exception\ClientException;


function data_router_preprocess_page(&$variables){
   $json = file_get_contents('private://auth/firebase.json');
   // TEST
   $conf = json_decode($json,TRUE);

   $roles = \Drupal::currentUser()->getRoles();
   if(!in_array('administrator',$roles) && !in_array('moderator',$roles) ){
    unset($conf['apiKey']);
   }
   $variables['#attached']['drupalSettings']['firebase'] = $conf;
} 

function data_router_form_alter(&$form,&$form_state,&$form_id){
  if($form_id == 'user_login_form'){
    $form['actions']['submit']['#attributes'] =  [
      'class' => ['btn btn--stroke full-width'],
    ];
    $form['actions']['submit']['#submit'][] =  'login_redirect';
    $form['#validate'][] = 'validate_captcha';
  }

  if($form_id == 'devel_admin_settings_form'){}

  if($form_id == 'node_places_form'){
    $form['status']['widget']['value']['#default_value'] = FALSE;
    $form['actions']['submit']['#submit'][] = 'send_email_add';
  }
// ksm($form_id);
  if($form_id == 'node_places_edit_form'){
   // $node = \Drupal::entityTypeManager()->getStorage('node')->load(288);
   // $uri = $node->get('field_youtube')->getValue();
   // $node->field_youtube = [
   //  'uri' => 'https://google.com',
   //  'title' => 'NO URI',
   //  'options' => [
   //      'attributes' => [
   //        'target' => '_blank','class'=>['btn','btn-primary']
   //      ],
   //    ]
   //  ];
   //  ksm($uri[0]['uri']);
   // $node->save();

// ksm($node);
//     $nids = \Drupal::entityQuery('node')->condition('type', 'places')->execute();
// ksm($nids);

    $form['actions']['submit']['#submit'][] = 'send_email_edit';
    $status = $form['status']['widget']['value']['#default_value'];
    $form_state->setTemporaryValue('old_status',$status);
  }

  /**
   * Alter UserPoints User EDIT FORM
   * */ 
  if($form_id == 'user_form'){
    $old_points = $form['field_points']['widget'][0]['value']['#default_value'];
    $form_state->setTemporaryValue('old_points',$old_points);
    $form['actions']['submit']['#submit'][] = 'alterPoints';
    $form['field_prev_points']['#disabled'] = TRUE;
  }

  if($form_id == 'user_register_form'){
    $form['#validate'][] = 'updateHash';
  }

}

/**
 * Submit hook user edit form
 * */ 
function alterPoints(&$form,&$form_state){
  $old_points     = $form_state->getTemporaryValue('old_points');
  $uid            = $form_state->getValues()['uid'];
  $user           = \Drupal::service('entity_type.manager')->getStorage('user')->load($uid);
  $current_points = $user->get('field_points')->value;
  if($old_points != $current_points){
    $user->set('field_prev_points',$old_points)->save();
  }
}

function updateHash(&$form,&$form_state){
  $name = $form_state->getValues()['name'];
  $hash = \Drupal::service('data_router.student')->generateHash($name);
  $form_state->setValue('field_qr',[['value' => $hash]]);
}

/**
 * Submit hook Node ADD form
 * */ 
function send_email_add(&$form,&$form_state){
  $values = $form_state->getValues();
  $url    = $values['path'][0]['alias'];
  $nid    = $values['nid'];

  $user  = \Drupal::currentUser();
  $email = $user->getEmail();

  $type  = 'add_data';
  sendEmail($type,$email,$nid);

}

/**
 * Submit hook Node Edit form
 * */ 
function send_email_edit(&$form,&$form_state){

  $values = $form_state->getValues();
  $url    = $values['path'][0]['alias'];
  $nid    = $values['nid'];
  $status = $values['status'];
  $old_status = $form_state->getTemporaryValue('old_status');
  $worklowStatus = getStatusWorkflow($old_status,$status);

  $uid    = $form_state->getValues()['uid'] ? $form_state->getValues()['uid'][0]['target_id'] : FALSE;
  if(empty($uid)){
    return;
  }

  $user = \Drupal::service('entity_type.manager')->getStorage('user')->load($uid);
  $email = $user->getEmail();
  $type  = 'edit_data';
  if($worklowStatus['isChanged'] && $worklowStatus['status']){ // Add points when published set from unpublished
    sendEmail($type,$email,$nid);
    $points = $user->get('field_points')->value;
    $user->set('field_prev_points',$points);
    $user->set('field_points',$points + 10);
    $user->save();
  }
}

function sendEmail($type,$email,$nid){
  $content      = \Drupal::service('entity_type.manager')->getStorage('node')->load($nid);
  $content_link = $content->path->getValue()[0]['alias'];

  $node =  \Drupal::service('entity_type.manager')
          ->getStorage('node')
          ->loadByProperties(['type'=>'config','field_config_name'=>$type]);
  $node    = array_values($node)[0];
  $message = $node->field_message->value;
  $subject = $node->field_subject->value;

  $message = str_replace('{{link}}',$content_link,$message);

  return \Drupal::service('data_router.mail')
          ->setMail($email)
          ->setSubject($subject)
          ->setMessage($message)
          ->send();
}

function getStatusWorkflow(&$old_status,$status){
  $new_status = $status['value'];
  if($old_status != $new_status){
      return [
        'isChanged' => TRUE,
        'status' => $new_status
      ];
  }

    return [
      'isChanged' => FALSE,
      'status' => $new_status
    ];
}

function login_redirect($form,$form_state){
  $input    = $form_state->getUserInput();
  $name     = $input['name'];
  $pass     = $input['pass'];
  $user     = \Drupal::service('entity_type.manager')->getStorage('user')->loadByProperties(['name' => $name]);

  user_login_finalize(reset($user));
  // $url = Url::fromRoute('<front>');
  // $form_state->setRedirectUrl($url);
  // \Drupal::messenger()->addMessage('Welcome '.$name);

  $url = Url::fromRoute('view.dashboard.main'); // FOR DASHBOARD IMPLEMENTATION
  $form_state->setRedirectUrl($url);            // FOR DASHBOARD IMPLEMENTATION
 
}



function validate_captcha($form,$form_state){
  $input   = $form_state->getUserInput();
  $token   = $input['g-recaptcha-response'];
  if(empty($token)){
    return $form_state->setErrorByName('captcha','Warning Please use Captcha');
  }

  $response = \Drupal::service('data_router.account')->setToken($token)->checkCaptcha();
  if($response == false){
    return $form_state->setErrorByName('captcha','Sorry , Youre Captcha was expired. Please Login again');
  }
}

 function data_router_theme($existing, $type, $theme, $path){
    return [
      'result' => [
        'variables' => ['data' => NULL],
      ],
      'qr' => [
        'variables' => ['data' => NULL],
      ],
      'student' => [
        'variables' => ['data' => NULL],
      ],
      'student_list' => [
        'variables' => ['data' => NULL],
      ],
      'cart' => [
        'variables' => ['data' => NULL],
      ],
    ];
 } 
